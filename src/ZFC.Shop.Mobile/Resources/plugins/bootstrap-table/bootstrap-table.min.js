(function (i) {
    var j = null; var l = function (t) { var r = arguments, q = true, s = 1; t = t.replace(/%s/g, function () { var u = r[s++]; if (typeof u === "undefined") { q = false; return "" } return u }); return q ? t : "" }; var c = function (s, u, t, r) { var q = ""; i.each(s, function (v, w) { if (w[u] === r) { q = w[t]; return false } return true }); return q }; var h = function (r, s) { var q = -1; i.each(r, function (t, u) { if (u.field === s) { q = t; return false } return true }); return q }; var k = function (t) { var x, w, v, z = 0, A = []; for (x = 0; x < t[0].length; x++) { z += t[0][x].colspan || 1 } for (x = 0; x < t.length; x++) { A[x] = []; for (w = 0; w < z; w++) { A[x][w] = false } } for (x = 0; x < t.length; x++) { for (w = 0; w < t[x].length; w++) { var q = t[x][w], u = q.rowspan || 1, s = q.colspan || 1, y = i.inArray(false, A[x]); if (s === 1) { q.fieldIndex = y; if (typeof q.field === "undefined") { q.field = y } } for (v = 0; v < u; v++) { A[x + v][y] = true } for (v = 0; v < s; v++) { A[x][y + v] = true } } } }; var a = function () { if (j === null) { var s = i("<p/>").addClass("fixed-table-scroll-inner"), t = i("<div/>").addClass("fixed-table-scroll-outer"), r, q; t.append(s); i("body").append(t); r = s[0].offsetWidth; t.css("overflow", "scroll"); q = s[0].offsetWidth; if (r === q) { q = t[0].clientWidth } t.remove(); j = r - q } return j }; var p = function (r, t, s, q) { var u = t; if (typeof t === "string") { var v = t.split("."); if (v.length > 1) { u = window; i.each(v, function (w, x) { u = u[x] }) } else { u = window[t] } } if (typeof u === "object") { return u } if (typeof u === "function") { return u.apply(r, s || []) } if (!u && typeof t === "string" && l.apply(this, [t].concat(s))) { return l.apply(this, [t].concat(s)) } return q }; var e = function (r, q, v) { var w = Object.getOwnPropertyNames(r), t = Object.getOwnPropertyNames(q), u = ""; if (v) { if (w.length !== t.length) { return false } } for (var s = 0; s < w.length; s++) { u = w[s]; if (i.inArray(u, t) > -1) { if (r[u] !== q[u]) { return false } } } return true }; var o = function (q) { if (typeof q === "string") { return q.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;").replace(/`/g, "&#x60;") } return q }; var f = function (s) { for (var q in s) { var r = q.split(/(?=[A-Z])/).join("-").toLowerCase(); if (r !== q) { s[r] = s[q]; delete s[q] } } return s }; var n = function (s, v, r) { var t = s; if (typeof v !== "string" || s.hasOwnProperty(v)) { return r ? o(s[v]) : s[v] } var q = v.split("."); for (var u in q) { if (q.hasOwnProperty(u)) { t = t && t[q[u]] } } return r ? o(t) : t }; var b = function () { return !!(navigator.userAgent.indexOf("MSIE ") > 0 || !!navigator.userAgent.match(/Trident.*rv\:11\./)) }; var g = function () { if (!Object.keys) { Object.keys = (function () { var s = Object.prototype.hasOwnProperty, t = !({ toString: null }).propertyIsEnumerable("toString"), r = ["toString", "toLocaleString", "valueOf", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "constructor"], q = r.length; return function (w) { if (typeof w !== "object" && (typeof w !== "function" || w === null)) { throw new TypeError("Object.keys called on non-object") } var u = [], x, v; for (x in w) { if (s.call(w, x)) { u.push(x) } } if (t) { for (v = 0; v < q; v++) { if (s.call(w, r[v])) { u.push(r[v]) } } } return u } }()) } }; var d = function (r, q) { this.options = q; this.$el = i(r); this.$el_ = this.$el.clone(); this.timeoutId_ = 0; this.timeoutFooter_ = 0; this.init() }; d.DEFAULTS = {
        classes: "table table-hover", sortClass: undefined, locale: undefined, height: undefined, undefinedText: "-", sortName: undefined, sortOrder: "asc", sortStable: false, striped: false, columns: [[]], data: [], totalField: "total", dataField: "rows", method: "get", url: undefined, ajax: undefined, cache: true, contentType: "application/json", dataType: "json", ajaxOptions: {}, queryParams: function (q) { return q }, queryParamsType: "limit", responseHandler: function (q) { return q }, pagination: false, onlyInfoPagination: false, paginationLoop: true, sidePagination: "client", totalRows: 0, pageNumber: 1, pageSize: 10, pageList: [10, 25, 50, 100], paginationClasses: "", paginationHAlign: "right", paginationVAlign: "bottom", paginationDetailHAlign: "left", paginationPreText: "&lsaquo;", paginationNextText: "&rsaquo;", search: false, searchOnEnterKey: false, strictSearch: false, searchAlign: "right", selectItemName: "btSelectItem", showHeader: true, showFooter: false, showColumns: false, showPaginationSwitch: false, showRefresh: false, showToggle: false, buttonsAlign: "right", smartDisplay: true, escape: false, minimumCountColumns: 1, idField: undefined, uniqueId: undefined, cardView: false, detailView: false, detailFormatter: function (q, r) { return "" }, trimOnSearch: true, clickToSelect: false, singleSelect: false, toolbar: undefined, toolbarAlign: "left", checkboxHeader: true, sortable: true, silentSort: true, maintainSelected: false, searchTimeOut: 500, searchText: "", iconSize: undefined, buttonsClass: "default", iconsPrefix: "glyphicon", icons: { paginationSwitchDown: "glyphicon-collapse-down icon-chevron-down", paginationSwitchUp: "glyphicon-collapse-up icon-chevron-up", refresh: "glyphicon-refresh icon-refresh", toggle: "glyphicon-list-alt icon-list-alt", columns: "glyphicon-th icon-th", detailOpen: "glyphicon-plus icon-plus", detailClose: "glyphicon-minus icon-minus" }, customSearch: i.noop, customSort: i.noop, rowStyle: function (r, q) { return {} }, rowAttributes: function (r, q) { return {} }, footerStyle: function (r, q) { return {} }, onAll: function (r, q) { return false }, onClickCell: function (s, r, t, q) { return false }, onDblClickCell: function (s, r, t, q) { return false }, onClickRow: function (r, q) {
            return false
        }, onDblClickRow: function (r, q) { return false }, onSort: function (r, q) { return false }, onCheck: function (q) { return false }, onUncheck: function (q) { return false }, onCheckAll: function (q) { return false }, onUncheckAll: function (q) { return false }, onCheckSome: function (q) { return false }, onUncheckSome: function (q) { return false }, onLoadSuccess: function (q) { return false }, onLoadError: function (q) { return false }, onColumnSwitch: function (r, q) { return false }, onPageChange: function (r, q) { return false }, onSearch: function (q) { return false }, onToggle: function (q) { return false }, onPreBody: function (q) { return false }, onPostBody: function () { return false }, onPostHeader: function () { return false }, onExpandRow: function (q, s, r) { return false }, onCollapseRow: function (q, r) { return false }, onRefreshOptions: function (q) { return false }, onRefresh: function (q) { return false }, onResetView: function () { return false }
    }; d.LOCALES = {}; d.LOCALES["en-US"] = d.LOCALES.en = { formatLoadingMessage: function () { return "Loading, please wait..." }, formatRecordsPerPage: function (q) { return l("%s rows per page", q) }, formatShowingRows: function (s, q, r) { return l("Showing %s to %s of %s rows", s, q, r) }, formatDetailPagination: function (q) { return l("Showing %s rows", q) }, formatSearch: function () { return "Search" }, formatNoMatches: function () { return "No matching records found" }, formatPaginationSwitch: function () { return "Hide/Show pagination" }, formatRefresh: function () { return "Refresh" }, formatToggle: function () { return "Toggle" }, formatColumns: function () { return "Columns" }, formatAllRows: function () { return "All" } }; i.extend(d.DEFAULTS, d.LOCALES["en-US"]); d.COLUMN_DEFAULTS = { radio: false, checkbox: false, checkboxEnabled: true, field: undefined, title: undefined, titleTooltip: undefined, "class": undefined, align: undefined, halign: undefined, falign: undefined, valign: undefined, width: undefined, sortable: false, order: "asc", visible: true, switchable: true, clickToSelect: true, formatter: undefined, footerFormatter: undefined, headerFormatter: undefined, events: undefined, sorter: undefined, sortName: undefined, cellStyle: undefined, searchable: true, searchFormatter: true, cardVisible: true, escape: false }; d.EVENTS = { "all.bs.table": "onAll", "click-cell.bs.table": "onClickCell", "dbl-click-cell.bs.table": "onDblClickCell", "click-row.bs.table": "onClickRow", "dbl-click-row.bs.table": "onDblClickRow", "sort.bs.table": "onSort", "check.bs.table": "onCheck", "uncheck.bs.table": "onUncheck", "check-all.bs.table": "onCheckAll", "uncheck-all.bs.table": "onUncheckAll", "check-some.bs.table": "onCheckSome", "uncheck-some.bs.table": "onUncheckSome", "load-success.bs.table": "onLoadSuccess", "load-error.bs.table": "onLoadError", "column-switch.bs.table": "onColumnSwitch", "page-change.bs.table": "onPageChange", "search.bs.table": "onSearch", "toggle.bs.table": "onToggle", "pre-body.bs.table": "onPreBody", "post-body.bs.table": "onPostBody", "post-header.bs.table": "onPostHeader", "expand-row.bs.table": "onExpandRow", "collapse-row.bs.table": "onCollapseRow", "refresh-options.bs.table": "onRefreshOptions", "reset-view.bs.table": "onResetView", "refresh.bs.table": "onRefresh" }; d.prototype.init = function () { this.initLocale(); this.initContainer(); this.initTable(); this.initHeader(); this.initData(); this.initHiddenRows(); this.initFooter(); this.initToolbar(); this.initPagination(); this.initBody(); this.initSearchText(); this.initServer() }; d.prototype.initLocale = function () { if (this.options.locale) { var q = this.options.locale.split(/-|_/); q[0].toLowerCase(); if (q[1]) { q[1].toUpperCase() } if (i.fn.bootstrapTable.locales[this.options.locale]) { i.extend(this.options, i.fn.bootstrapTable.locales[this.options.locale]) } else { if (i.fn.bootstrapTable.locales[q.join("-")]) { i.extend(this.options, i.fn.bootstrapTable.locales[q.join("-")]) } else { if (i.fn.bootstrapTable.locales[q[0]]) { i.extend(this.options, i.fn.bootstrapTable.locales[q[0]]) } } } } }; d.prototype.initContainer = function () {
        this.$container = i(['<div class="bootstrap-table">', '<div class="fixed-table-toolbar"></div>', this.options.paginationVAlign === "top" || this.options.paginationVAlign === "both" ? '<div class="fixed-table-pagination" style="clear: both;"></div>' : "", '<div class="fixed-table-container">', '<div class="fixed-table-header"><table></table></div>', '<div class="fixed-table-body">', '<div class="fixed-table-loading">', this.options.formatLoadingMessage(), "</div>", "</div>", '<div class="fixed-table-footer"><table><tr></tr></table></div>', this.options.paginationVAlign === "bottom" || this.options.paginationVAlign === "both" ? '<div class="fixed-table-pagination"></div>' : "", "</div>", "</div>"].join("")); this.$container.insertAfter(this.$el); this.$tableContainer = this.$container.find(".fixed-table-container"); this.$tableHeader = this.$container.find(".fixed-table-header"); this.$tableBody = this.$container.find(".fixed-table-body"); this.$tableLoading = this.$container.find(".fixed-table-loading"); this.$tableFooter = this.$container.find(".fixed-table-footer"); this.$toolbar = this.$container.find(".fixed-table-toolbar"); this.$pagination = this.$container.find(".fixed-table-pagination"); this.$tableBody.append(this.$el); this.$container.after('<div class="clearfix"></div>'); this.$el.addClass(this.options.classes);
        if (this.options.striped) { this.$el.addClass("table-striped") } if (i.inArray("table-no-bordered", this.options.classes.split(" ")) !== -1) { this.$tableContainer.addClass("table-no-bordered") }
    }; d.prototype.initTable = function () { var s = this, r = [], t = []; this.$header = this.$el.find(">thead"); if (!this.$header.length) { this.$header = i("<thead></thead>").appendTo(this.$el) } this.$header.find("tr").each(function () { var u = []; i(this).find("th").each(function () { if (typeof i(this).data("field") !== "undefined") { i(this).data("field", i(this).data("field") + "") } u.push(i.extend({}, { title: i(this).html(), "class": i(this).attr("class"), titleTooltip: i(this).attr("title"), rowspan: i(this).attr("rowspan") ? +i(this).attr("rowspan") : undefined, colspan: i(this).attr("colspan") ? +i(this).attr("colspan") : undefined }, i(this).data())) }); r.push(u) }); if (!i.isArray(this.options.columns[0])) { this.options.columns = [this.options.columns] } this.options.columns = i.extend(true, [], r, this.options.columns); this.columns = []; k(this.options.columns); i.each(this.options.columns, function (v, u) { i.each(u, function (w, x) { x = i.extend({}, d.COLUMN_DEFAULTS, x); if (typeof x.fieldIndex !== "undefined") { s.columns[x.fieldIndex] = x } s.options.columns[v][w] = x }) }); if (this.options.data.length) { return } var q = []; this.$el.find(">tbody>tr").each(function (v) { var u = {}; u._id = i(this).attr("id"); u._class = i(this).attr("class"); u._data = f(i(this).data()); i(this).find(">td").each(function (y) { var D = i(this), A = +D.attr("colspan") || 1, B = +D.attr("rowspan") || 1, z, w; for (; q[v] && q[v][y]; y++) { } for (z = y; z < y + A; z++) { for (w = v; w < v + B; w++) { if (!q[w]) { q[w] = [] } q[w][z] = true } } var C = s.columns[y].field; u[C] = i(this).html(); u["_" + C + "_id"] = i(this).attr("id"); u["_" + C + "_class"] = i(this).attr("class"); u["_" + C + "_rowspan"] = i(this).attr("rowspan"); u["_" + C + "_colspan"] = i(this).attr("colspan"); u["_" + C + "_title"] = i(this).attr("title"); u["_" + C + "_data"] = f(i(this).data()) }); t.push(u) }); this.options.data = t; if (t.length) { this.fromHtml = true } }; d.prototype.initHeader = function () {
        var s = this, q = {}, r = []; this.header = { fields: [], styles: [], classes: [], formatters: [], events: [], sorters: [], sortNames: [], cellStyles: [], searchables: [] }; i.each(this.options.columns, function (u, t) { r.push("<tr>"); if (u === 0 && !s.options.cardView && s.options.detailView) { r.push(l('<th class="detail" rowspan="%s"><div class="fht-cell"></div></th>', s.options.columns.length)) } i.each(t, function (A, z) { var E = "", B = "", D = "", v = "", C = l(' class="%s"', z["class"]), y = s.options.sortOrder || z.order, x = "px", w = z.width; if (z.width !== undefined && (!s.options.cardView)) { if (typeof z.width === "string") { if (z.width.indexOf("%") !== -1) { x = "%" } } } if (z.width && typeof z.width === "string") { w = z.width.replace("%", "").replace("px", "") } B = l("text-align: %s; ", z.halign ? z.halign : z.align); D = l("text-align: %s; ", z.align); v = l("vertical-align: %s; ", z.valign); v += l("width: %s; ", (z.checkbox || z.radio) && !w ? "36px" : (w ? w + x : undefined)); if (typeof z.fieldIndex !== "undefined") { s.header.fields[z.fieldIndex] = z.field; s.header.styles[z.fieldIndex] = D + v; s.header.classes[z.fieldIndex] = C; s.header.formatters[z.fieldIndex] = z.formatter; s.header.events[z.fieldIndex] = z.events; s.header.sorters[z.fieldIndex] = z.sorter; s.header.sortNames[z.fieldIndex] = z.sortName; s.header.cellStyles[z.fieldIndex] = z.cellStyle; s.header.searchables[z.fieldIndex] = z.searchable; if (!z.visible) { return } if (s.options.cardView && (!z.cardVisible)) { return } q[z.field] = z } r.push("<th" + l(' title="%s"', z.titleTooltip), z.checkbox || z.radio ? l(' class="bs-checkbox %s"', z["class"] || "") : C, l(' style="%s"', B + v), l(' rowspan="%s"', z.rowspan), l(' colspan="%s"', z.colspan), l(' data-field="%s"', z.field), ">"); r.push(l('<div class="th-inner %s">', s.options.sortable && z.sortable ? "sortable both" : "")); E = s.options.escape ? o(z.title) : z.title; if (z.checkbox) { if (!s.options.singleSelect && s.options.checkboxHeader) { E = '<input name="btSelectAll" type="checkbox" />' } s.header.stateField = z.field } if (z.radio) { E = ""; s.header.stateField = z.field; s.options.singleSelect = true } if (z.headerFormatter) { E = p(z, z.headerFormatter, []) } r.push(E); r.push("</div>"); r.push('<div class="fht-cell"></div>'); r.push("</div>"); r.push("</th>") }); r.push("</tr>") }); this.$header.html(r.join("")); this.$header.find("th[data-field]").each(function (t) { i(this).data(q[i(this).data("field")]) }); this.$container.off("click", ".th-inner").on("click", ".th-inner", function (t) { var u = i(this); if (s.options.detailView) { if (u.closest(".bootstrap-table")[0] !== s.$container[0]) { return false } } if (s.options.sortable && u.parent().data().sortable) { s.onSort(t) } }); this.$header.children().children().off("keypress").on("keypress", function (u) { if (s.options.sortable && i(this).data().sortable) { var t = u.keyCode || u.which; if (t == 13) { s.onSort(u) } } }); i(window).off("resize.bootstrap-table"); if (!this.options.showHeader || this.options.cardView) { this.$header.hide(); this.$tableHeader.hide(); this.$tableLoading.css("top", 0) } else { this.$header.show(); this.$tableHeader.show(); this.$tableLoading.css("top", this.$header.outerHeight() + 1); this.getCaret(); i(window).on("resize.bootstrap-table", i.proxy(this.resetWidth, this)) } this.$selectAll = this.$header.find('[name="btSelectAll"]');
        this.$selectAll.off("click").on("click", function () { var t = i(this).prop("checked"); s[t ? "checkAll" : "uncheckAll"](); s.updateSelected() })
    }; d.prototype.initFooter = function () { if (!this.options.showFooter || this.options.cardView) { this.$tableFooter.hide() } else { this.$tableFooter.show() } }; d.prototype.initData = function (r, q) { if (q === "append") { this.data = this.data.concat(r) } else { if (q === "prepend") { this.data = [].concat(r).concat(this.data) } else { this.data = r || this.options.data } } if (q === "append") { this.options.data = this.options.data.concat(r) } else { if (q === "prepend") { this.options.data = [].concat(r).concat(this.options.data) } else { this.options.data = this.data } } if (this.options.sidePagination === "server") { return } this.initSort() }; d.prototype.initSort = function () { var t = this, s = this.options.sortName, q = this.options.sortOrder === "desc" ? -1 : 1, r = i.inArray(this.options.sortName, this.header.fields), u = 0; if (this.options.customSort !== i.noop) { this.options.customSort.apply(this, [this.options.sortName, this.options.sortOrder]); return } if (r !== -1) { if (this.options.sortStable) { i.each(this.data, function (v, w) { if (!w.hasOwnProperty("_position")) { w._position = v } }) } this.data.sort(function (w, v) { if (t.header.sortNames[r]) { s = t.header.sortNames[r] } var y = n(w, s, t.options.escape), z = n(v, s, t.options.escape), x = p(t.header, t.header.sorters[r], [y, z]); if (x !== undefined) { return q * x } if (y === undefined || y === null) { y = "" } if (z === undefined || z === null) { z = "" } if (t.options.sortStable && y === z) { y = w._position; z = v._position } if (i.isNumeric(y) && i.isNumeric(z)) { y = parseFloat(y); z = parseFloat(z); if (y < z) { return q * -1 } return q } if (y === z) { return 0 } if (typeof y !== "string") { y = y.toString() } if (y.localeCompare(z) === -1) { return q * -1 } return q }); if (this.options.sortClass !== undefined) { clearTimeout(u); u = setTimeout(function () { t.$el.removeClass(t.options.sortClass); var v = t.$header.find(l('[data-field="%s"]', t.options.sortName).index() + 1); t.$el.find(l("tr td:nth-child(%s)", v)).addClass(t.options.sortClass) }, 250) } } }; d.prototype.onSort = function (q) { var s = q.type === "keypress" ? i(q.currentTarget) : i(q.currentTarget).parent(), r = this.$header.find("th").eq(s.index()); this.$header.add(this.$header_).find("span.order").remove(); if (this.options.sortName === s.data("field")) { this.options.sortOrder = this.options.sortOrder === "asc" ? "desc" : "asc" } else { this.options.sortName = s.data("field"); this.options.sortOrder = s.data("order") === "asc" ? "desc" : "asc" } this.trigger("sort", this.options.sortName, this.options.sortOrder); s.add(r).data("order", this.options.sortOrder); this.getCaret(); if (this.options.sidePagination === "server") { this.initServer(this.options.silentSort); return } this.initSort(); this.initBody() }; d.prototype.initToolbar = function () {
        var t = this, s = [], v = 0, r, u, q = 0; if (this.$toolbar.find(".bs-bars").children().length) { i("body").append(i(this.options.toolbar)) } this.$toolbar.html(""); if (typeof this.options.toolbar === "string" || typeof this.options.toolbar === "object") { i(l('<div class="bs-bars pull-%s"></div>', this.options.toolbarAlign)).appendTo(this.$toolbar).append(i(this.options.toolbar)) } s = [l('<div class="columns columns-%s btn-group pull-%s">', this.options.buttonsAlign, this.options.buttonsAlign)]; if (typeof this.options.icons === "string") { this.options.icons = p(null, this.options.icons) } if (this.options.showPaginationSwitch) { s.push(l('<button class="btn' + l(" btn-%s", this.options.buttonsClass) + l(" btn-%s", this.options.iconSize) + '" type="button" name="paginationSwitch" aria-label="pagination Switch" title="%s">', this.options.formatPaginationSwitch()), l('<i class="%s %s"></i>', this.options.iconsPrefix, this.options.icons.paginationSwitchDown), "</button>") } if (this.options.showRefresh) { s.push(l('<button class="btn' + l(" btn-%s", this.options.buttonsClass) + l(" btn-%s", this.options.iconSize) + '" type="button" name="refresh" aria-label="refresh" title="%s">', this.options.formatRefresh()), l('<i class="%s %s"></i>', this.options.iconsPrefix, this.options.icons.refresh), "</button>") } if (this.options.showToggle) { s.push(l('<button class="btn' + l(" btn-%s", this.options.buttonsClass) + l(" btn-%s", this.options.iconSize) + '" type="button" name="toggle" aria-label="toggle" title="%s">', this.options.formatToggle()), l('<i class="%s %s"></i>', this.options.iconsPrefix, this.options.icons.toggle), "</button>") } if (this.options.showColumns) { s.push(l('<div class="keep-open btn-group" title="%s">', this.options.formatColumns()), '<button type="button" aria-label="columns" class="btn' + l(" btn-%s", this.options.buttonsClass) + l(" btn-%s", this.options.iconSize) + ' dropdown-toggle" data-toggle="dropdown">', l('<i class="%s %s"></i>', this.options.iconsPrefix, this.options.icons.columns), ' <span class="caret"></span>', "</button>", '<ul class="dropdown-menu" role="menu">'); i.each(this.columns, function (w, x) { if (x.radio || x.checkbox) { return } if (t.options.cardView && !x.cardVisible) { return } var y = x.visible ? ' checked="checked"' : ""; if (x.switchable) { s.push(l('<li role="menuitem">' + '<label><input type="checkbox" data-field="%s" value="%s"%s> %s</label>' + "</li>", x.field, w, y, x.title)); q++ } }); s.push("</ul>", "</div>") } s.push("</div>"); if (this.showToolbar || s.length > 2) {
            this.$toolbar.append(s.join(""))
        } if (this.options.showPaginationSwitch) { this.$toolbar.find('button[name="paginationSwitch"]').off("click").on("click", i.proxy(this.togglePagination, this)) } if (this.options.showRefresh) { this.$toolbar.find('button[name="refresh"]').off("click").on("click", i.proxy(this.refresh, this)) } if (this.options.showToggle) { this.$toolbar.find('button[name="toggle"]').off("click").on("click", function () { t.toggleView() }) } if (this.options.showColumns) { r = this.$toolbar.find(".keep-open"); if (q <= this.options.minimumCountColumns) { r.find("input").prop("disabled", true) } r.find("li").off("click").on("click", function (w) { w.stopImmediatePropagation() }); r.find("input").off("click").on("click", function () { var w = i(this); t.toggleColumn(i(this).val(), w.prop("checked"), false); t.trigger("column-switch", i(this).data("field"), w.prop("checked")) }) } if (this.options.search) { s = []; s.push('<div class="pull-' + this.options.searchAlign + ' search">', l('<input class="form-control' + l(" input-%s", this.options.iconSize) + '" type="text" placeholder="%s">', this.options.formatSearch()), "</div>"); this.$toolbar.append(s.join("")); u = this.$toolbar.find(".search input"); u.off("keyup drop blur").on("keyup drop blur", function (w) { if (t.options.searchOnEnterKey && w.keyCode !== 13) { return } if (i.inArray(w.keyCode, [37, 38, 39, 40]) > -1) { return } clearTimeout(v); v = setTimeout(function () { t.onSearch(w) }, t.options.searchTimeOut) }); if (b()) { u.off("mouseup").on("mouseup", function (w) { clearTimeout(v); v = setTimeout(function () { t.onSearch(w) }, t.options.searchTimeOut) }) } }
    }; d.prototype.onSearch = function (q) { var r = i.trim(i(q.currentTarget).val()); if (this.options.trimOnSearch && i(q.currentTarget).val() !== r) { i(q.currentTarget).val(r) } if (r === this.searchText) { return } this.searchText = r; this.options.searchText = r; this.options.pageNumber = 1; this.initSearch(); this.updatePagination(); this.trigger("search", r) }; d.prototype.initSearch = function () { var r = this; if (this.options.sidePagination !== "server") { if (this.options.customSearch !== i.noop) { this.options.customSearch.apply(this, [this.searchText]); return } var q = this.searchText && (this.options.escape ? o(this.searchText) : this.searchText).toLowerCase(); var t = i.isEmptyObject(this.filterColumns) ? null : this.filterColumns; this.data = t ? i.grep(this.options.data, function (v, u) { for (var s in t) { if (i.isArray(t[s]) && i.inArray(v[s], t[s]) === -1 || !i.isArray(t[s]) && v[s] !== t[s]) { return false } } return true }) : this.options.data; this.data = q ? i.grep(this.data, function (z, w) { for (var u = 0; u < r.header.fields.length; u++) { if (!r.header.searchables[u]) { continue } var v = i.isNumeric(r.header.fields[u]) ? parseInt(r.header.fields[u], 10) : r.header.fields[u]; var y = r.columns[h(r.columns, v)]; var A; if (typeof v === "string") { A = z; var x = v.split("."); for (var s = 0; s < x.length; s++) { A = A[x[s]] } if (y && y.searchFormatter) { A = p(y, r.header.formatters[u], [A, z, w], A) } } else { A = z[v] } if (typeof A === "string" || typeof A === "number") { if (r.options.strictSearch) { if ((A + "").toLowerCase() === q) { return true } } else { if ((A + "").toLowerCase().indexOf(q) !== -1) { return true } } } } return false }) : this.data } }; d.prototype.initPagination = function () {
        if (!this.options.pagination) { this.$pagination.hide(); return } else { this.$pagination.show() } var u = this, w = [], q = false, A, y, r, v, E, G, C, x, t, H = this.getData(), s = this.options.pageList; if (this.options.sidePagination !== "server") { this.options.totalRows = H.length } this.totalPages = 0; if (this.options.totalRows) { if (this.options.pageSize === this.options.formatAllRows()) { this.options.pageSize = this.options.totalRows; q = true } else { if (this.options.pageSize === this.options.totalRows) { var F = typeof this.options.pageList === "string" ? this.options.pageList.replace("[", "").replace("]", "").replace(/ /g, "").toLowerCase().split(",") : this.options.pageList; if (i.inArray(this.options.formatAllRows().toLowerCase(), F) > -1) { q = true } } } this.totalPages = ~~((this.options.totalRows - 1) / this.options.pageSize) + 1; this.options.totalPages = this.totalPages } if (this.totalPages > 0 && this.options.pageNumber > this.totalPages) { this.options.pageNumber = this.totalPages } this.pageFrom = (this.options.pageNumber - 1) * this.options.pageSize + 1; this.pageTo = this.options.pageNumber * this.options.pageSize; if (this.pageTo > this.options.totalRows) { this.pageTo = this.options.totalRows } var z = this.options.onlyInfoPagination; if (z) {
            w.push('<div class="pull-' + this.options.paginationDetailHAlign + ' pagination-detail">', '<span class="pagination-info">', z ? this.options.formatDetailPagination(this.options.totalRows) : this.options.formatShowingRows(this.pageFrom, this.pageTo, this.options.totalRows), "</span>"); w.push('<span class="page-list">'); var D = [l('<span class="btn-group %s">', this.options.paginationVAlign === "top" || this.options.paginationVAlign === "both" ? "dropdown" : "dropup"), '<button type="button" class="btn' + l(" btn-%s", this.options.buttonsClass) + l(" btn-%s", this.options.iconSize) + ' dropdown-toggle" data-toggle="dropdown">', '<span class="page-size">', q ? this.options.formatAllRows() : this.options.pageSize, "</span>", ' <span class="caret"></span>', "</button>", '<ul class="dropdown-menu" role="menu">']; if (typeof this.options.pageList === "string") {
                var B = this.options.pageList.replace("[", "").replace("]", "").replace(/ /g, "").split(",");
                s = []; i.each(B, function (I, J) { s.push(J.toUpperCase() === u.options.formatAllRows().toUpperCase() ? u.options.formatAllRows() : +J) })
            } i.each(s, function (I, J) { if (!u.options.smartDisplay || I === 0 || s[I - 1] < u.options.totalRows) { var K; if (q) { K = J === u.options.formatAllRows() ? ' class="active"' : "" } else { K = J === u.options.pageSize ? ' class="active"' : "" } D.push(l('<li role="menuitem"%s><a href="#">%s</a></li>', K, J)) } }); D.push("</ul></span>"); w.push(this.options.formatRecordsPerPage(D.join(""))); w.push("</span></div>")
        } if (!z) { w.push('<div class="pull-' + this.options.paginationHAlign + " pagination " + this.options.paginationClasses + '">', '<ul class="pagination' + l(" pagination-%s", this.options.iconSize) + '">', '<li class="page-pre"><a href="#">' + this.options.paginationPreText + "</a></li>"); if (this.totalPages < 5) { y = 1; r = this.totalPages } else { y = this.options.pageNumber - 2; r = y + 4; if (y < 1) { y = 1; r = 5 } if (r > this.totalPages) { r = this.totalPages; y = r - 4 } } if (this.totalPages >= 6) { if (this.options.pageNumber >= 3) { w.push('<li class="page-first' + (1 === this.options.pageNumber ? " active" : "") + '">', '<a href="#">', 1, "</a>", "</li>"); y++ } if (this.options.pageNumber >= 4) { if (this.options.pageNumber == 4 || this.totalPages == 6 || this.totalPages == 7) { y-- } else { w.push('<li class="page-first-separator disabled">', '<a href="#">...</a>', "</li>") } r-- } } if (this.totalPages >= 7) { if (this.options.pageNumber >= (this.totalPages - 2)) { y-- } } if (this.totalPages == 6) { if (this.options.pageNumber >= (this.totalPages - 2)) { r++ } } else { if (this.totalPages >= 7) { if (this.totalPages == 7 || this.options.pageNumber >= (this.totalPages - 3)) { r++ } } } for (A = y; A <= r; A++) { w.push('<li class="page-number' + (A === this.options.pageNumber ? " active" : "") + '">', '<a href="#">', A, "</a>", "</li>") } if (this.totalPages >= 8) { if (this.options.pageNumber <= (this.totalPages - 4)) { w.push('<li class="page-last-separator disabled">', '<a href="#">...</a>', "</li>") } } if (this.totalPages >= 6) { if (this.options.pageNumber <= (this.totalPages - 3)) { w.push('<li class="page-last' + (this.totalPages === this.options.pageNumber ? " active" : "") + '">', '<a href="#">', this.totalPages, "</a>", "</li>") } } w.push('<li class="page-next"><a href="#">' + this.options.paginationNextText + "</a></li>", "</ul>", "</div>") } this.$pagination.html(w.join("")); if (!z) { v = this.$pagination.find(".page-list a"); E = this.$pagination.find(".page-first"); G = this.$pagination.find(".page-pre"); C = this.$pagination.find(".page-next"); x = this.$pagination.find(".page-last"); t = this.$pagination.find(".page-number"); if (this.options.smartDisplay) { if (this.totalPages <= 1) { this.$pagination.find("div.pagination").hide() } if (s.length < 2 || this.options.totalRows <= s[0]) { this.$pagination.find("span.page-list").hide() } this.$pagination[this.getData().length ? "show" : "hide"]() } if (!this.options.paginationLoop) { if (this.options.pageNumber === 1) { G.addClass("disabled") } if (this.options.pageNumber === this.totalPages) { C.addClass("disabled") } } if (q) { this.options.pageSize = this.options.formatAllRows() } v.off("click").on("click", i.proxy(this.onPageListChange, this)); E.off("click").on("click", i.proxy(this.onPageFirst, this)); G.off("click").on("click", i.proxy(this.onPagePre, this)); C.off("click").on("click", i.proxy(this.onPageNext, this)); x.off("click").on("click", i.proxy(this.onPageLast, this)); t.off("click").on("click", i.proxy(this.onPageNumber, this)) }
    }; d.prototype.updatePagination = function (q) { if (q && i(q.currentTarget).hasClass("disabled")) { return } if (!this.options.maintainSelected) { this.resetRows() } this.initPagination(); if (this.options.sidePagination === "server") { this.initServer() } else { this.initBody() } this.trigger("page-change", this.options.pageNumber, this.options.pageSize) }; d.prototype.onPageListChange = function (q) { var r = i(q.currentTarget); r.parent().addClass("active").siblings().removeClass("active"); this.options.pageSize = r.text().toUpperCase() === this.options.formatAllRows().toUpperCase() ? this.options.formatAllRows() : +r.text(); this.$toolbar.find(".page-size").text(this.options.pageSize); this.updatePagination(q); return false }; d.prototype.onPageFirst = function (q) { this.options.pageNumber = 1; this.updatePagination(q); return false }; d.prototype.onPagePre = function (q) { if ((this.options.pageNumber - 1) === 0) { this.options.pageNumber = this.options.totalPages } else { this.options.pageNumber-- } this.updatePagination(q); return false }; d.prototype.onPageNext = function (q) { if ((this.options.pageNumber + 1) > this.options.totalPages) { this.options.pageNumber = 1 } else { this.options.pageNumber++ } this.updatePagination(q); return false }; d.prototype.onPageLast = function (q) { this.options.pageNumber = this.totalPages; this.updatePagination(q); return false }; d.prototype.onPageNumber = function (q) { if (this.options.pageNumber === +i(q.currentTarget).text()) { return } this.options.pageNumber = +i(q.currentTarget).text(); this.updatePagination(q); return false }; d.prototype.initRow = function (B, w, v, t) {
        var y = this, A, x = [], q = {}, r = [], s = "", u = {}, z = []; if (i.inArray(B, this.hiddenRows) > -1) { return } q = p(this.options, this.options.rowStyle, [B, w], q); if (q && q.css) { for (A in q.css) { r.push(A + ": " + q.css[A]) } } u = p(this.options, this.options.rowAttributes, [B, w], u); if (u) {
            for (A in u) {
                z.push(l('%s="%s"', A, o(u[A])))
            }
        } if (B._data && !i.isEmptyObject(B._data)) { i.each(B._data, function (D, C) { if (D === "index") { return } s += l(' data-%s="%s"', D, C) }) } x.push("<tr", l(" %s", z.join(" ")), l(' id="%s"', i.isArray(B) ? undefined : B._id), l(' class="%s"', q.classes || (i.isArray(B) ? undefined : B._class)), l(' data-index="%s"', w), l(' data-uniqueid="%s"', B[this.options.uniqueId]), l("%s", s), ">"); if (this.options.cardView) { x.push(l('<td colspan="%s"><div class="card-views">', this.header.fields.length)) } if (!this.options.cardView && this.options.detailView) { x.push("<td>", '<a class="detail-icon" href="#">', l('<i class="%s %s"></i>', this.options.iconsPrefix, this.options.icons.detailOpen), "</a>", "</td>") } i.each(this.header.fields, function (H, L) { var P = "", K = n(B, L, y.options.escape), M = "", J = "", D = {}, Q = "", I = y.header.classes[H], F = "", O = "", R = "", G = "", E = y.columns[H]; if (y.fromHtml && typeof K === "undefined") { return } if (!E.visible) { return } if (y.options.cardView && (!E.cardVisible)) { return } if (E.escape) { K = o(K) } q = l('style="%s"', r.concat(y.header.styles[H]).join("; ")); if (B["_" + L + "_id"]) { Q = l(' id="%s"', B["_" + L + "_id"]) } if (B["_" + L + "_class"]) { I = l(' class="%s"', B["_" + L + "_class"]) } if (B["_" + L + "_rowspan"]) { O = l(' rowspan="%s"', B["_" + L + "_rowspan"]) } if (B["_" + L + "_colspan"]) { R = l(' colspan="%s"', B["_" + L + "_colspan"]) } if (B["_" + L + "_title"]) { G = l(' title="%s"', B["_" + L + "_title"]) } D = p(y.header, y.header.cellStyles[H], [K, B, w, L], D); if (D.classes) { I = l(' class="%s"', D.classes) } if (D.css) { var C = []; for (var N in D.css) { C.push(N + ": " + D.css[N]) } q = l('style="%s"', C.concat(y.header.styles[H]).join("; ")) } M = p(E, y.header.formatters[H], [K, B, w], K); if (B["_" + L + "_data"] && !i.isEmptyObject(B["_" + L + "_data"])) { i.each(B["_" + L + "_data"], function (T, S) { if (T === "index") { return } F += l(' data-%s="%s"', T, S) }) } if (E.checkbox || E.radio) { J = E.checkbox ? "checkbox" : J; J = E.radio ? "radio" : J; P = [l(y.options.cardView ? '<div class="card-view %s">' : '<td class="bs-checkbox %s">', E["class"] || ""), "<input" + l(' data-index="%s"', w) + l(' name="%s"', y.options.selectItemName) + l(' type="%s"', J) + l(' value="%s"', B[y.options.idField]) + l(' checked="%s"', M === true || (K || M && M.checked) ? "checked" : undefined) + l(' disabled="%s"', !E.checkboxEnabled || (M && M.disabled) ? "disabled" : undefined) + " />", y.header.formatters[H] && typeof M === "string" ? M : "", y.options.cardView ? "</div>" : "</td>"].join(""); B[y.header.stateField] = M === true || (M && M.checked) } else { M = typeof M === "undefined" || M === null ? y.options.undefinedText : M; P = y.options.cardView ? ['<div class="card-view">', y.options.showHeader ? l('<span class="title" %s>%s</span>', q, c(y.columns, "field", "title", L)) : "", l('<span class="value">%s</span>', M), "</div>"].join("") : [l("<td%s %s %s %s %s %s %s>", Q, I, q, F, O, R, G), M, "</td>"].join(""); if (y.options.cardView && y.options.smartDisplay && M === "") { P = '<div class="card-view"></div>' } } x.push(P) }); if (this.options.cardView) { x.push("</div></td>") } x.push("</tr>"); return x.join(" ")
    }; d.prototype.initBody = function (t) {
        var w = this, u = [], r = this.getData(); this.trigger("pre-body", r); this.$body = this.$el.find(">tbody"); if (!this.$body.length) { this.$body = i("<tbody></tbody>").appendTo(this.$el) } if (!this.options.pagination || this.options.sidePagination === "server") { this.pageFrom = 1; this.pageTo = r.length } var q = i(document.createDocumentFragment()); var v; for (var s = this.pageFrom - 1; s < this.pageTo; s++) { var y = r[s]; var x = this.initRow(y, s, r, q); v = v || !!x; if (x && x !== true) { q.append(x) } } if (!v) { q.append('<tr class="no-records-found">' + l('<td colspan="%s">%s</td>', this.$header.find("th").length, this.options.formatNoMatches()) + "</tr>") } this.$body.html(q); if (!t) { this.scrollTo(0) } this.$body.find("> tr[data-index] > td").off("click dblclick").on("click dblclick", function (F) { var z = i(this), B = z.parent(), I = w.data[B.data("index")], D = z[0].cellIndex, C = w.getVisibleFields(), G = C[w.options.detailView && !w.options.cardView ? D - 1 : D], A = w.columns[h(w.columns, G)], H = n(I, G, w.options.escape); if (z.find(".detail-icon").length) { return } w.trigger(F.type === "click" ? "click-cell" : "dbl-click-cell", G, H, I, z); w.trigger(F.type === "click" ? "click-row" : "dbl-click-row", I, B, G); if (F.type === "click" && w.options.clickToSelect && A.clickToSelect) { var E = B.find(l('[name="%s"]', w.options.selectItemName)); if (E.length) { E[0].click() } } }); this.$body.find("> tr[data-index] > td > .detail-icon").off("click").on("click", function () { var D = i(this), C = D.parent().parent(), A = C.data("index"), E = r[A]; if (C.next().is("tr.detail-view")) { D.find("i").attr("class", l("%s %s", w.options.iconsPrefix, w.options.icons.detailOpen)); w.trigger("collapse-row", A, E); C.next().remove() } else { D.find("i").attr("class", l("%s %s", w.options.iconsPrefix, w.options.icons.detailClose)); C.after(l('<tr class="detail-view"><td colspan="%s"></td></tr>', C.find("td").length)); var z = C.next().find("td"); var B = p(w.options, w.options.detailFormatter, [A, E, z], ""); if (z.length === 1) { z.append(B) } w.trigger("expand-row", A, E, z) } w.resetView(); return false }); this.$selectItem = this.$body.find(l('[name="%s"]', this.options.selectItemName)); this.$selectItem.off("click").on("click", function (A) {
            A.stopImmediatePropagation(); var B = i(this), z = B.prop("checked"), C = w.data[B.data("index")]; if (w.options.maintainSelected && i(this).is(":radio")) {
                i.each(w.options.data, function (D, E) {
                    E[w.header.stateField] = false
                })
            } C[w.header.stateField] = z; if (w.options.singleSelect) { w.$selectItem.not(this).each(function () { w.data[i(this).data("index")][w.header.stateField] = false }); w.$selectItem.filter(":checked").not(this).prop("checked", false) } w.updateSelected(); w.trigger(z ? "check" : "uncheck", C, B)
        }); i.each(this.header.events, function (C, B) { if (!B) { return } if (typeof B === "string") { B = p(null, B) } var D = w.header.fields[C], z = i.inArray(D, w.getVisibleFields()); if (w.options.detailView && !w.options.cardView) { z += 1 } for (var A in B) { w.$body.find(">tr:not(.no-records-found)").each(function () { var I = i(this), J = I.find(w.options.cardView ? ".card-view" : "td").eq(z), F = A.indexOf(" "), E = A.substring(0, F), G = A.substring(F + 1), H = B[A]; J.find(G).off(E).on(E, function (M) { var K = I.data("index"), N = w.data[K], L = N[D]; H.apply(this, [M, L, N, K]) }) }) } }); this.updateSelected(); this.resetView(); this.trigger("post-body", r)
    }; d.prototype.initServer = function (q, v, r) { var t = this, u = {}, w = { searchText: this.searchText, sortName: this.options.sortName, sortOrder: this.options.sortOrder }, s; if (this.options.pagination) { w.pageSize = this.options.pageSize === this.options.formatAllRows() ? this.options.totalRows : this.options.pageSize; w.pageNumber = this.options.pageNumber } if (!(r || this.options.url) && !this.options.ajax) { return } if (this.options.queryParamsType === "limit") { w = { search: w.searchText, sort: w.sortName, order: w.sortOrder }; if (this.options.pagination) { w.offset = this.options.pageSize === this.options.formatAllRows() ? 0 : this.options.pageSize * (this.options.pageNumber - 1); w.limit = this.options.pageSize === this.options.formatAllRows() ? this.options.totalRows : this.options.pageSize } } if (!(i.isEmptyObject(this.filterColumnsPartial))) { w.filter = JSON.stringify(this.filterColumnsPartial, null) } u = p(this.options, this.options.queryParams, [w], u); i.extend(u, v || {}); if (u === false) { return } if (!q) { this.$tableLoading.show() } s = i.extend({}, p(null, this.options.ajaxOptions), { type: this.options.method, url: r || this.options.url, data: this.options.contentType === "application/json" && this.options.method === "post" ? JSON.stringify(u) : u, cache: this.options.cache, contentType: this.options.contentType, dataType: this.options.dataType, success: function (x) { x = p(t.options, t.options.responseHandler, [x], x); t.load(x); t.trigger("load-success", x); if (!q) { t.$tableLoading.hide() } }, error: function (x) { t.trigger("load-error", x.status, x); if (!q) { t.$tableLoading.hide() } } }); if (this.options.ajax) { p(this, this.options.ajax, [s], null) } else { if (this._xhr && this._xhr.readyState !== 4) { this._xhr.abort() } this._xhr = i.ajax(s) } }; d.prototype.initSearchText = function () { if (this.options.search) { if (this.options.searchText !== "") { var q = this.$toolbar.find(".search input"); q.val(this.options.searchText); this.onSearch({ currentTarget: q }) } } }; d.prototype.getCaret = function () { var q = this; i.each(this.$header.find("th"), function (r, s) { i(s).find(".sortable").removeClass("desc asc").addClass(i(s).data("field") === q.options.sortName ? q.options.sortOrder : "both") }) }; d.prototype.updateSelected = function () { var q = this.$selectItem.filter(":enabled").length && this.$selectItem.filter(":enabled").length === this.$selectItem.filter(":enabled").filter(":checked").length; this.$selectAll.add(this.$selectAll_).prop("checked", q); this.$selectItem.each(function () { i(this).closest("tr")[i(this).prop("checked") ? "addClass" : "removeClass"]("selected") }) }; d.prototype.updateRows = function () { var q = this; this.$selectItem.each(function () { q.data[i(this).data("index")][q.header.stateField] = i(this).prop("checked") }) }; d.prototype.resetRows = function () { var q = this; i.each(this.data, function (r, s) { q.$selectAll.prop("checked", false); q.$selectItem.prop("checked", false); if (q.header.stateField) { s[q.header.stateField] = false } }); this.initHiddenRows() }; d.prototype.trigger = function (r) { var q = Array.prototype.slice.call(arguments, 1); r += ".bs.table"; this.options[d.EVENTS[r]].apply(this.options, q); this.$el.trigger(i.Event(r), q); this.options.onAll(r, q); this.$el.trigger(i.Event("all.bs.table"), [r, q]) }; d.prototype.resetHeader = function () { clearTimeout(this.timeoutId_); this.timeoutId_ = setTimeout(i.proxy(this.fitHeader, this), this.$el.is(":hidden") ? 100 : 0) }; d.prototype.fitHeader = function () {
        var s = this, t, q, w, x; if (s.$el.is(":hidden")) { s.timeoutId_ = setTimeout(i.proxy(s.fitHeader, s), 100); return } t = this.$tableBody.get(0); q = t.scrollWidth > t.clientWidth && t.scrollHeight > t.clientHeight + this.$header.outerHeight() ? a() : 0; this.$el.css("margin-top", -this.$header.outerHeight()); w = i(":focus"); if (w.length > 0) { var y = w.parents("th"); if (y.length > 0) { var z = y.attr("data-field"); if (z !== undefined) { var r = this.$header.find("[data-field='" + z + "']"); if (r.length > 0) { r.find(":input").addClass("focus-temp") } } } } this.$header_ = this.$header.clone(true, true); this.$selectAll_ = this.$header_.find('[name="btSelectAll"]'); this.$tableHeader.css({ "margin-right": q }).find("table").css("width", this.$el.outerWidth()).html("").attr("class", this.$el.attr("class")).append(this.$header_); x = i(".focus-temp:visible:eq(0)"); if (x.length > 0) { x.focus(); this.$header.find(".focus-temp").removeClass("focus-temp") } this.$header.find("th[data-field]").each(function (A) {
            s.$header_.find(l('th[data-field="%s"]', i(this).data("field"))).data(i(this).data())
        }); var v = this.getVisibleFields(), u = this.$header_.find("th"); this.$body.find(">tr:first-child:not(.no-records-found) > *").each(function (B) { var D = i(this), A = B; if (s.options.detailView && !s.options.cardView) { if (B === 0) { s.$header_.find("th.detail").find(".fht-cell").width(D.innerWidth()) } A = B - 1 } var C = s.$header_.find(l('th[data-field="%s"]', v[A])); if (C.length > 1) { C = i(u[D[0].cellIndex]) } C.find(".fht-cell").width(D.innerWidth()) }); this.$tableBody.off("scroll").on("scroll", function () { s.$tableHeader.scrollLeft(i(this).scrollLeft()); if (s.options.showFooter && !s.options.cardView) { s.$tableFooter.scrollLeft(i(this).scrollLeft()) } }); s.trigger("post-header")
    }; d.prototype.resetFooter = function () { var r = this, s = r.getData(), q = []; if (!this.options.showFooter || this.options.cardView) { return } if (!this.options.cardView && this.options.detailView) { q.push('<td><div class="th-inner">&nbsp;</div><div class="fht-cell"></div></td>') } i.each(this.columns, function (w, y) { var v, A = "", u = "", z = [], x = {}, t = l(' class="%s"', y["class"]); if (!y.visible) { return } if (r.options.cardView && (!y.cardVisible)) { return } A = l("text-align: %s; ", y.falign ? y.falign : y.align); u = l("vertical-align: %s; ", y.valign); x = p(null, r.options.footerStyle); if (x && x.css) { for (v in x.css) { z.push(v + ": " + x.css[v]) } } q.push("<td", t, l(' style="%s"', A + u + z.concat().join("; ")), ">"); q.push('<div class="th-inner">'); q.push(p(y, y.footerFormatter, [s], "&nbsp;") || "&nbsp;"); q.push("</div>"); q.push('<div class="fht-cell"></div>'); q.push("</div>"); q.push("</td>") }); this.$tableFooter.find("tr").html(q.join("")); this.$tableFooter.show(); clearTimeout(this.timeoutFooter_); this.timeoutFooter_ = setTimeout(i.proxy(this.fitFooter, this), this.$el.is(":hidden") ? 100 : 0) }; d.prototype.fitFooter = function () { var t = this, q, s, r; clearTimeout(this.timeoutFooter_); if (this.$el.is(":hidden")) { this.timeoutFooter_ = setTimeout(i.proxy(this.fitFooter, this), 100); return } s = this.$el.css("width"); r = s > this.$tableBody.width() ? a() : 0; this.$tableFooter.css({ "margin-right": r }).find("table").css("width", s).attr("class", this.$el.attr("class")); q = this.$tableFooter.find("td"); this.$body.find(">tr:first-child:not(.no-records-found) > *").each(function (u) { var v = i(this); q.eq(u).find(".fht-cell").width(v.innerWidth()) }) }; d.prototype.toggleColumn = function (q, r, t) { if (q === -1) { return } this.columns[q].visible = r; this.initHeader(); this.initSearch(); this.initPagination(); this.initBody(); if (this.options.showColumns) { var s = this.$toolbar.find(".keep-open input").prop("disabled", false); if (t) { s.filter(l('[value="%s"]', q)).prop("checked", r) } if (s.filter(":checked").length <= this.options.minimumCountColumns) { s.filter(":checked").prop("disabled", true) } } }; d.prototype.getVisibleFields = function () { var r = this, q = []; i.each(this.header.fields, function (s, u) { var t = r.columns[h(r.columns, u)]; if (!t.visible) { return } q.push(u) }); return q }; d.prototype.resetView = function (t) { var r = 0; if (t && t.height) { this.options.height = t.height } this.$selectAll.prop("checked", this.$selectItem.length > 0 && this.$selectItem.length === this.$selectItem.filter(":checked").length); if (this.options.height) { var s = this.$toolbar.outerHeight(true), u = this.$pagination.outerHeight(true), q = this.options.height - s - u; this.$tableContainer.css("height", q + "px") } if (this.options.cardView) { this.$el.css("margin-top", "0"); this.$tableContainer.css("padding-bottom", "0"); this.$tableFooter.hide(); return } if (this.options.showHeader && this.options.height) { this.$tableHeader.show(); this.resetHeader(); r += this.$header.outerHeight() } else { this.$tableHeader.hide(); this.trigger("post-header") } if (this.options.showFooter) { this.resetFooter(); if (this.options.height) { r += this.$tableFooter.outerHeight() + 1 } } this.getCaret(); this.$tableContainer.css("padding-bottom", r + "px"); this.trigger("reset-view") }; d.prototype.getData = function (q) { return (this.searchText || !i.isEmptyObject(this.filterColumns) || !i.isEmptyObject(this.filterColumnsPartial)) ? (q ? this.data.slice(this.pageFrom - 1, this.pageTo) : this.data) : (q ? this.options.data.slice(this.pageFrom - 1, this.pageTo) : this.options.data) }; d.prototype.load = function (r) { var q = false; if (this.options.sidePagination === "server") { this.options.totalRows = r[this.options.totalField]; q = r.fixedScroll; r = r[this.options.dataField] } else { if (!i.isArray(r)) { q = r.fixedScroll; r = r.data } } this.initData(r); this.initSearch(); this.initPagination(); this.initBody(q) }; d.prototype.append = function (q) { this.initData(q, "append"); this.initSearch(); this.initPagination(); this.initSort(); this.initBody(true) }; d.prototype.prepend = function (q) { this.initData(q, "prepend"); this.initSearch(); this.initPagination(); this.initSort(); this.initBody(true) }; d.prototype.remove = function (t) {
        var q = this.options.data.length, r, s; if (!t.hasOwnProperty("field") || !t.hasOwnProperty("values")) { return } for (r = q - 1; r >= 0; r--) { s = this.options.data[r]; if (!s.hasOwnProperty(t.field)) { continue } if (i.inArray(s[t.field], t.values) !== -1) { this.options.data.splice(r, 1); if (this.options.sidePagination === "server") { this.options.totalRows -= 1 } } } if (q === this.options.data.length) { return } this.initSearch(); this.initPagination(); this.initSort(); this.initBody(true)
    }; d.prototype.removeAll = function () { if (this.options.data.length > 0) { this.options.data.splice(0, this.options.data.length); this.initSearch(); this.initPagination(); this.initBody(true) } }; d.prototype.getRowByUniqueId = function (w) { var v = this.options.uniqueId, q = this.options.data.length, r = null, s, u, t; for (s = q - 1; s >= 0; s--) { u = this.options.data[s]; if (u.hasOwnProperty(v)) { t = u[v] } else { if (u._data.hasOwnProperty(v)) { t = u._data[v] } else { continue } } if (typeof t === "string") { w = w.toString() } else { if (typeof t === "number") { if ((Number(t) === t) && (t % 1 === 0)) { w = parseInt(w) } else { if ((t === Number(t)) && (t !== 0)) { w = parseFloat(w) } } } } if (t === w) { r = u; break } } return r }; d.prototype.removeByUniqueId = function (s) { var q = this.options.data.length, r = this.getRowByUniqueId(s); if (r) { this.options.data.splice(this.options.data.indexOf(r), 1) } if (q === this.options.data.length) { return } this.initSearch(); this.initPagination(); this.initBody(true) }; d.prototype.updateByUniqueId = function (s) { var q = this; var r = i.isArray(s) ? s : [s]; i.each(r, function (t, v) { var u; if (!v.hasOwnProperty("id") || !v.hasOwnProperty("row")) { return } u = i.inArray(q.getRowByUniqueId(v.id), q.options.data); if (u === -1) { return } i.extend(q.options.data[u], v.row) }); this.initSearch(); this.initPagination(); this.initSort(); this.initBody(true) }; d.prototype.insertRow = function (q) { if (!q.hasOwnProperty("index") || !q.hasOwnProperty("row")) { return } this.data.splice(q.index, 0, q.row); this.initSearch(); this.initPagination(); this.initSort(); this.initBody(true) }; d.prototype.updateRow = function (s) { var q = this; var r = i.isArray(s) ? s : [s]; i.each(r, function (t, u) { if (!u.hasOwnProperty("index") || !u.hasOwnProperty("row")) { return } i.extend(q.options.data[u.index], u.row) }); this.initSearch(); this.initPagination(); this.initSort(); this.initBody(true) }; d.prototype.initHiddenRows = function () { this.hiddenRows = [] }; d.prototype.showRow = function (q) { this.toggleRow(q, true) }; d.prototype.hideRow = function (q) { this.toggleRow(q, false) }; d.prototype.toggleRow = function (t, s) { var r, q; if (t.hasOwnProperty("index")) { r = this.getData()[t.index] } else { if (t.hasOwnProperty("uniqueId")) { r = this.getRowByUniqueId(t.uniqueId) } } if (!r) { return } q = i.inArray(r, this.hiddenRows); if (!s && q === -1) { this.hiddenRows.push(r) } else { if (s && q > -1) { this.hiddenRows.splice(q, 1) } } this.initBody(true) }; d.prototype.getHiddenRows = function (q) { var r = this, t = this.getData(), s = []; i.each(t, function (u, v) { if (i.inArray(v, r.hiddenRows) > -1) { s.push(v) } }); this.hiddenRows = s; return s }; d.prototype.mergeCells = function (y) { var x = y.index, s = i.inArray(y.field, this.getVisibleFields()), t = y.rowspan || 1, r = y.colspan || 1, v, u, w = this.$body.find(">tr"), q; if (this.options.detailView && !this.options.cardView) { s += 1 } q = w.eq(x).find(">td").eq(s); if (x < 0 || s < 0 || x >= this.data.length) { return } for (v = x; v < x + t; v++) { for (u = s; u < s + r; u++) { w.eq(v).find(">td").eq(u).hide() } } q.attr("rowspan", t).attr("colspan", r).show() }; d.prototype.updateCell = function (q) { if (!q.hasOwnProperty("index") || !q.hasOwnProperty("field") || !q.hasOwnProperty("value")) { return } this.data[q.index][q.field] = q.value; if (q.reinit === false) { return } this.initSort(); this.initBody(true) }; d.prototype.getOptions = function () { return this.options }; d.prototype.getSelections = function () { var q = this; return i.grep(this.options.data, function (r) { return r[q.header.stateField] === true }) }; d.prototype.getAllSelections = function () { var q = this; return i.grep(this.options.data, function (r) { return r[q.header.stateField] }) }; d.prototype.checkAll = function () { this.checkAll_(true) }; d.prototype.uncheckAll = function () { this.checkAll_(false) }; d.prototype.checkInvert = function () { var r = this; var s = r.$selectItem.filter(":enabled"); var q = s.filter(":checked"); s.each(function () { i(this).prop("checked", !i(this).prop("checked")) }); r.updateRows(); r.updateSelected(); r.trigger("uncheck-some", q); q = r.getSelections(); r.trigger("check-some", q) }; d.prototype.checkAll_ = function (q) { var r; if (!q) { r = this.getSelections() } this.$selectAll.add(this.$selectAll_).prop("checked", q); this.$selectItem.filter(":enabled").prop("checked", q); this.updateRows(); if (q) { r = this.getSelections() } this.trigger(q ? "check-all" : "uncheck-all", r) }; d.prototype.check = function (q) { this.check_(true, q) }; d.prototype.uncheck = function (q) { this.check_(false, q) }; d.prototype.check_ = function (s, q) { var r = this.$selectItem.filter(l('[data-index="%s"]', q)).prop("checked", s); this.data[q][this.header.stateField] = s; this.updateSelected(); this.trigger(s ? "check" : "uncheck", this.data[q], r) }; d.prototype.checkBy = function (q) { this.checkBy_(true, q) }; d.prototype.uncheckBy = function (q) { this.checkBy_(false, q) }; d.prototype.checkBy_ = function (r, t) { if (!t.hasOwnProperty("field") || !t.hasOwnProperty("values")) { return } var q = this, s = []; i.each(this.options.data, function (u, w) { if (!w.hasOwnProperty(t.field)) { return false } if (i.inArray(w[t.field], t.values) !== -1) { var v = q.$selectItem.filter(":enabled").filter(l('[data-index="%s"]', u)).prop("checked", r); w[q.header.stateField] = r; s.push(w); q.trigger(r ? "check" : "uncheck", w, v) } }); this.updateSelected(); this.trigger(r ? "check-some" : "uncheck-some", s) }; d.prototype.destroy = function () {
        this.$el.insertBefore(this.$container); i(this.options.toolbar).insertBefore(this.$el);
        this.$container.next().remove(); this.$container.remove(); this.$el.html(this.$el_.html()).css("margin-top", "0").attr("class", this.$el_.attr("class") || "")
    }; d.prototype.showLoading = function () { this.$tableLoading.show() }; d.prototype.hideLoading = function () { this.$tableLoading.hide() }; d.prototype.togglePagination = function () { this.options.pagination = !this.options.pagination; var q = this.$toolbar.find('button[name="paginationSwitch"] i'); if (this.options.pagination) { q.attr("class", this.options.iconsPrefix + " " + this.options.icons.paginationSwitchDown) } else { q.attr("class", this.options.iconsPrefix + " " + this.options.icons.paginationSwitchUp) } this.updatePagination() }; d.prototype.refresh = function (q) { if (q && q.url) { this.options.url = q.url } if (q && q.pageNumber) { this.options.pageNumber = q.pageNumber } if (q && q.pageSize) { this.options.pageSize = q.pageSize } this.initServer(q && q.silent, q && q.query, q && q.url); this.trigger("refresh", q) }; d.prototype.resetWidth = function () { if (this.options.showHeader && this.options.height) { this.fitHeader() } if (this.options.showFooter) { this.fitFooter() } }; d.prototype.showColumn = function (q) { this.toggleColumn(h(this.columns, q), true, true) }; d.prototype.hideColumn = function (q) { this.toggleColumn(h(this.columns, q), false, true) }; d.prototype.getHiddenColumns = function () { return i.grep(this.columns, function (q) { return !q.visible }) }; d.prototype.getVisibleColumns = function () { return i.grep(this.columns, function (q) { return q.visible }) }; d.prototype.toggleAllColumns = function (q) { i.each(this.columns, function (s, t) { this.columns[s].visible = q }); this.initHeader(); this.initSearch(); this.initPagination(); this.initBody(); if (this.options.showColumns) { var r = this.$toolbar.find(".keep-open input").prop("disabled", false); if (r.filter(":checked").length <= this.options.minimumCountColumns) { r.filter(":checked").prop("disabled", true) } } }; d.prototype.showAllColumns = function () { this.toggleAllColumns(true) }; d.prototype.hideAllColumns = function () { this.toggleAllColumns(false) }; d.prototype.filterBy = function (q) { this.filterColumns = i.isEmptyObject(q) ? {} : q; this.options.pageNumber = 1; this.initSearch(); this.updatePagination() }; d.prototype.scrollTo = function (q) { if (typeof q === "string") { q = q === "bottom" ? this.$tableBody[0].scrollHeight : 0 } if (typeof q === "number") { this.$tableBody.scrollTop(q) } if (typeof q === "undefined") { return this.$tableBody.scrollTop() } }; d.prototype.getScrollPosition = function () { return this.scrollTo() }; d.prototype.selectPage = function (q) { if (q > 0 && q <= this.options.totalPages) { this.options.pageNumber = q; this.updatePagination() } }; d.prototype.prevPage = function () { if (this.options.pageNumber > 1) { this.options.pageNumber--; this.updatePagination() } }; d.prototype.nextPage = function () { if (this.options.pageNumber < this.options.totalPages) { this.options.pageNumber++; this.updatePagination() } }; d.prototype.toggleView = function () { this.options.cardView = !this.options.cardView; this.initHeader(); this.initBody(); this.trigger("toggle", this.options.cardView) }; d.prototype.refreshOptions = function (q) { if (e(this.options, q, true)) { return } this.options = i.extend(this.options, q); this.trigger("refresh-options", this.options); this.destroy(); this.init() }; d.prototype.resetSearch = function (r) { var q = this.$toolbar.find(".search input"); q.val(r || ""); this.onSearch({ currentTarget: q }) }; d.prototype.expandRow_ = function (r, q) { var s = this.$body.find(l('> tr[data-index="%s"]', q)); if (s.next().is("tr.detail-view") === (r ? false : true)) { s.find("> td > .detail-icon").click() } }; d.prototype.expandRow = function (q) { this.expandRow_(true, q) }; d.prototype.collapseRow = function (q) { this.expandRow_(false, q) }; d.prototype.expandAllRows = function (q) { if (q) { var v = this.$body.find(l('> tr[data-index="%s"]', 0)), w = this, t = null, u = false, r = -1; if (!v.next().is("tr.detail-view")) { v.find("> td > .detail-icon").click(); u = true } else { if (!v.next().next().is("tr.detail-view")) { v.next().find(".detail-icon").click(); u = true } } if (u) { try { r = setInterval(function () { t = w.$body.find("tr.detail-view").last().find(".detail-icon"); if (t.length > 0) { t.click() } else { clearInterval(r) } }, 1) } catch (y) { clearInterval(r) } } } else { var x = this.$body.children(); for (var s = 0; s < x.length; s++) { this.expandRow_(true, i(x[s]).data("index")) } } }; d.prototype.collapseAllRows = function (r) { if (r) { this.expandRow_(false, 0) } else { var q = this.$body.children(); for (var s = 0; s < q.length; s++) { this.expandRow_(false, i(q[s]).data("index")) } } }; d.prototype.updateFormatText = function (q, r) { if (this.options[l("format%s", q)]) { if (typeof r === "string") { this.options[l("format%s", q)] = function () { return r } } else { if (typeof r === "function") { this.options[l("format%s", q)] = r } } } this.initToolbar(); this.initPagination(); this.initBody() }; var m = ["getOptions", "getSelections", "getAllSelections", "getData", "load", "append", "prepend", "remove", "removeAll", "insertRow", "updateRow", "updateCell", "updateByUniqueId", "removeByUniqueId", "getRowByUniqueId", "showRow", "hideRow", "getHiddenRows", "mergeCells", "checkAll", "uncheckAll", "checkInvert", "check", "uncheck", "checkBy", "uncheckBy", "refresh", "resetView", "resetWidth", "destroy", "showLoading", "hideLoading", "showColumn", "hideColumn", "getHiddenColumns", "getVisibleColumns", "showAllColumns", "hideAllColumns", "filterBy", "scrollTo", "getScrollPosition", "selectPage", "prevPage", "nextPage", "togglePagination", "toggleView", "refreshOptions", "resetSearch", "expandRow", "collapseRow", "expandAllRows", "collapseAllRows", "updateFormatText"];
    i.fn.bootstrapTable = function (r) { var s, q = Array.prototype.slice.call(arguments, 1); this.each(function () { var v = i(this), u = v.data("bootstrap.table"), t = i.extend({}, d.DEFAULTS, v.data(), typeof r === "object" && r); if (typeof r === "string") { if (i.inArray(r, m) < 0) { throw new Error("Unknown method: " + r) } if (!u) { return } s = u[r].apply(u, q); if (r === "destroy") { v.removeData("bootstrap.table") } } if (!u) { v.data("bootstrap.table", (u = new d(this, t))) } }); return typeof s === "undefined" ? this : s }; i.fn.bootstrapTable.Constructor = d; i.fn.bootstrapTable.defaults = d.DEFAULTS; i.fn.bootstrapTable.columnDefaults = d.COLUMN_DEFAULTS; i.fn.bootstrapTable.locales = d.LOCALES; i.fn.bootstrapTable.methods = m; i.fn.bootstrapTable.utils = { sprintf: l, getFieldIndex: h, compareObjects: e, calculateObjectValue: p, getItemField: n, objectKeys: g, isIEBrowser: b }; i(function () { i('[data-toggle="table"]').bootstrapTable() })
})(jQuery);